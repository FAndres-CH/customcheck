{"version":3,"sources":["App_2.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","button","App","classes","useState","id","uuidv4","brand","style","type","state","updateNeeded","retrofit","tuneup","investment","others","machines","setmachines","firstName","lastName","handleSubmit","e","preventDefault","console","log","handleChangeInput","event","newMachines","map","i","target","name","value","handleAddFields","handleRemoveFields","length","values","splice","findIndex","Container","className","onSubmit","onChange","TextField","label","variant","Rating","precision","IconButton","disabled","onClick","Button","color","endIcon","Icon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a530da6d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Icon from '@material-ui/core/Icon';\nimport Rating from '@material-ui/lab/Rating';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App_2.css'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n  button: {\n    margin: theme.spacing(1),\n  }\n}))\n\nfunction App() {\n  const classes = useStyles()\n  const [machines, setmachines] = useState([\n    { id: uuidv4(), brand: '', style:'' ,type: '', state:0, updateNeeded:'unknown', retrofit:'unknown', tuneup:'unknown', investment:'', others:''},\n  ]);\n  const [inputFields, setInputFields] = useState([\n    { id: uuidv4(), firstName: '', lastName: '' },\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"InputFields\", machines);\n  };\n\n  const handleChangeInput = (id, event) => {\n    const newMachines = machines.map(i => {\n      if(id === i.id) {\n        i[event.target.name] = event.target.value\n      }\n      return i;\n    })\n    \n    setmachines(newMachines);\n  }\n\n  const handleAddFields = () => {\n    setmachines([...machines, { id: uuidv4(), brand: '', style:'' ,type: '', state:0, updateNeeded:'unknown', retrofit:'unknown', tuneup:'unknown', investment:'', others:''}])\n  }\n\n  const handleRemoveFields = id => {\n    console.log(machines.length) \n    if (machines.length >= 2){\n      const values  = [...machines];\n      values.splice(values.findIndex(value => value.id === id), 1);\n      setmachines(values);\n    }\n  }\n\n  return (\n    <Container>\n      <h1>Kunden Check</h1>\n      <form className={classes.root} onSubmit={handleSubmit}>\n        { machines.map(machines => (\n          <div className=\"machines\" key={machines.id}>\n            <label>Anlagenart</label> <select className=\"form-control\" name=\"style\" onChange={event => handleChangeInput(machines.id, event)}>\n                    <option value=\"unknown\">\n                        Bitte Wählen\n                    </option>\n                    <option value=\"mass finishing\">\n                        Gleitschleifen\n                    </option>\n                    <option value=\"blasting\">\n                        Strahlen\n                    </option>\n            </select>\n            <TextField\n              name=\"brand\"\n              label=\"Hersteller\"\n              variant=\"filled\"\n              value={machines.brand}\n              onChange={event => handleChangeInput(machines.id, event)}\n            />\n            \n            <TextField\n              name=\"type\"\n              label=\"Typ\"\n              variant=\"filled\"\n              value={machines.type}\n              onChange={event => handleChangeInput(machines.id, event)}\n            />\n            <div>\n            <label>Zustand\n            <Rating\n                name=\"state\"\n                value={machines.state}\n                precision={0.5}\n                onChange={event => handleChangeInput(machines.id, event)}\n              /></label>\n          </div>\n        <div className=\"form-group\">\n                    <label>Analge erneuerungsbedürftig?</label> <select className=\"form-control\" name=\"updateNeeded\" onChange={event => handleChangeInput(machines.id, event)}>\n                    <option value=\"unknown\">\n                        Bitte Wählen\n                    </option>\n\n                    <option value=\"no\">\n                        Nein\n                    </option>\n                \n                    <option value=\"yes\">\n                        Ja\n                    </option>\n                    </select>\n            </div>\n            <div className=\"form-group\">\n                    <label>Interesse an Retrofit? <i>Karte abgegeben?</i></label> <select className=\"form-control\" name=\"retrofit\" onChange={event => handleChangeInput(machines.id, event)}>\n                    <option value=\"unknown\">\n                        Bitte Wählen\n                    </option>\n\n                    <option value=\"no\">\n                        Nein\n                    </option>\n                \n                    <option value=\"yes\">\n                        Ja\n                    </option>\n                    </select>\n            </div>\n\n            <div className=\"form-group\">\n                    <label>Interesse an TuneUp? <i>Karte abgegeben?</i></label> <select className=\"form-control\" name=\"retrofit\" onChange={event => handleChangeInput(machines.id, event)}>\n                    <option value=\"unknown\">\n                        Bitte Wählen\n                    </option>\n\n                    <option value=\"no\">\n                        Nein\n                    </option>\n                \n                    <option value=\"yes\">\n                        Ja\n                    </option>\n                    </select>\n            </div>\n            <TextField\n              name=\"investment\"\n              label=\"Investment geplant?\"\n              variant=\"filled\"\n              value={machines.investment}\n              onChange={event => handleChangeInput(machines.id, event)}\n            />\n\n        <label>\n          <textarea name=\"others\"\n              label=\"Sonstiges\"\n              variant=\"filled\"\n              value={machines.others}\n              onChange={event => handleChangeInput(machines.id, event)}/>\n        </label>\n            <IconButton disabled={machines.length === 1} onClick={() => handleRemoveFields(machines.id)}>\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              onClick={handleAddFields}\n            >\n              <AddIcon />\n            </IconButton>\n          </div>\n        )) }\n        <Button\n          className={classes.button}\n          variant=\"contained\" \n          color=\"primary\" \n          type=\"submit\" \n          endIcon={<Icon>send</Icon>}\n          onClick={handleSubmit}\n        >Send</Button>\n      </form>\n    </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App_2';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}